'''Flask/PyMySQL app to post ride request and offers in the rideshare_db. 

Daisy, Lindsay, and Valerie. 
Fall 2022
'''
from flask import (Flask, render_template, make_response, url_for, request,
                   redirect, flash, session, send_from_directory, jsonify)
from werkzeug.utils import secure_filename

from datetime import datetime
app = Flask(__name__)

# one or the other of these. Defaults to MySQL (PyMySQL)
# change comment characters to switch to SQLite


import cs304dbi as dbi
dbi.conf('rideshare_db')
# import cs304dbi_sqlite3 as dbi
import queue_functions as qf
import crud_functions as cf
import random

app.secret_key = 'your secret here'
# replace that with a random key
app.secret_key = ''.join([ random.choice(('ABCDEFGHIJKLMNOPQRSTUVXYZ' +
                                          'abcdefghijklmnopqrstuvxyz' +
                                          '0123456789'))
                           for i in range(20) ])

# This gets us better error messages for certain common request errors
app.config['TRAP_BAD_REQUEST_ERRORS'] = True

# for CAS
from flask_cas import CAS

CAS(app)

app.config['CAS_SERVER'] = 'https://login.wellesley.edu:443'
app.config['CAS_LOGIN_ROUTE'] = '/module.php/casserver/cas.php/login'
app.config['CAS_LOGOUT_ROUTE'] = '/module.php/casserver/cas.php/logout'
app.config['CAS_VALIDATE_ROUTE'] = '/module.php/casserver/serviceValidate.php'
app.config['CAS_AFTER_LOGIN'] = 'logged_in'
# the following doesn't work yet :-(
app.config['CAS_AFTER_LOGOUT'] = 'after_logout'



app.config['UPLOADS'] = 'uploads'
app.config['MAX_CONTENT_LENGTH'] = 1*1024*1024 # 1 MB

@app.route('/')
def index():
    '''Home page has a nav bar and shows all posts in the database. Redirects
    to applogin page if the user is not logged in.'''
    if 'CAS_USERNAME' not in session:
        return redirect(url_for('applogin'))
    else:
        is_logged_in = True
        username = session['CAS_USERNAME']
        conn = dbi.connect()
        posts = qf.get_posts_with_usernames(conn)
        users = qf.get_all_users(conn)
        states = qf.get_all_states(conn)
        return render_template('main.html',page_title='Wellesley College Rideshare',
         posts = posts, users=users, states=states, username=username,
         is_logged_in=is_logged_in)

@app.route('/myposts/', methods =['GET', 'POST'])
def my_posts():
    '''myposts page shows all the posts that a user has created, 
    including both requests and offers.'''
    if 'CAS_USERNAME' not in session:
            return redirect(url_for('applogin'))
    else:
        is_logged_in = True
        username = session['CAS_USERNAME']
        conn = dbi.connect()
        myPosts = []
        posts = qf.get_posts_with_usernames(conn)
        for post in posts:
            if post['username'] == username:
                myPosts.append(post)
        users = qf.get_all_users(conn)
        states = qf.get_all_states(conn)
        if request.method == 'GET':
            return render_template('myposts.html',page_title='My Posts', posts = myPosts, 
            users=users, states=states, username=username, is_logged_in=is_logged_in)
        else:
            pid = request.form['pid']
            cf.deactivatePost(conn, pid)
            return redirect(url_for('my_posts'))

@app.route('/applogin/')
def applogin():
    if 'CAS_USERNAME' in session:
        return redirect( url_for('index') )
    else:
        return render_template('login.html', page_title='Login Page')

@app.route('/logged_in/')
def logged_in():
    conn = dbi.connect()
    if 'CAS_USERNAME' in session:
        username = session['CAS_USERNAME']
    if 'CAS_ATTRIBUTES' in session:
        attribs = session['CAS_ATTRIBUTES']
        first_name = attribs['cas:givenName']
        last_name = attribs['cas:sn']
        name_to_insert = first_name + " " + last_name
    #user already in table
    if qf.userExists(conn, username):
        return redirect( url_for('index') )
    #new user
    else:  
        cf.insertUser(conn, username, name_to_insert)
        return redirect(url_for('update_user', username = username))


@app.route('/updateprofile/', methods =['GET', 'POST'])
def update_user():
    if 'CAS_USERNAME' not in session:
        return redirect(url_for('applogin'))
    else:
        their_username = session['CAS_USERNAME']
        conn = dbi.connect()
        if request.method == 'GET':
            #blank complete profile form 
            this_profile = qf.get_profile_info(conn, their_username)
            current_pn=this_profile['phone_number']
            current_cy=this_profile['class_year']
            current_mj=this_profile['major']
            current_ht=this_profile['hometown']
            current_pic = qf.getProfilePic(conn, their_username)
            return render_template("updateProfile.html", page_title='Update Profile', pic=current_pic, 
            username = their_username, current_pn=current_pn, current_cy=current_cy, 
            current_mj=current_mj, current_ht=current_ht)
        else: 
            #pre form info: 
            this_profile = qf.get_profile_info(conn, their_username)
            current_pn=this_profile['phone_number']
            current_cy=this_profile['class_year']
            current_mj=this_profile['major']
            current_ht=this_profile['hometown']
            current_pic = qf.getProfilePic(conn, their_username)
            #make variables from form data
            #figure out which variables were filled out

            #add something to check in file upload is empty
            phone_number = request.form['phone_number']
            pn_empty = (phone_number == "")
            if pn_empty:
                phone_number = current_pn
            class_year = request.form['class_year']
            cy_empty = (class_year == "")
            if cy_empty:
                class_year = current_cy
            major = request.form['major']
            mj_empty = (major == "")
            if mj_empty: 
                major = current_mj
            hometown = request.form['hometown']
            ht_empty = (hometown == "")
            if ht_empty: 
                hometown = current_ht
            cf.updateUser(conn, username=their_username, phone_number=phone_number, 
            class_year=class_year, major=major, hometown=hometown)
            file = request.files['pic']
            user_filename = file.filename
            if user_filename != '':
                ext = user_filename.split('.')[-1]
                filename = secure_filename('{}.{}'.format(their_username,ext))
                pathname = os.path.join(app.config['UPLOADS'],filename)
                file.save(pathname)
                cf.updateProfilePic(conn, their_username, filename)
            return redirect( url_for('profile', username = their_username))   


@app.route('/after_logout/')
def after_logout():
    '''redircts the user to the home page once they logout'''
    return redirect( url_for('index') )


@app.route('/profile/<string:username>')
def profile(username):
    '''displays a users profile'''
    if 'CAS_USERNAME' not in session:
        return redirect(url_for('applogin'))
    else:
        their_username = session['CAS_USERNAME']
        conn = dbi.connect()
        user = qf.get_profile_info(conn, username)
        pic = qf.getProfilePic(conn, username)
        return render_template('profile.html', page_title= username, user = user, pic=pic, username=their_username)

@app.route('/pic/<username>')
def pic(username):
    ''' displays a user's inputed picture if they have uploaded a picture '''
    if 'CAS_USERNAME' not in session:
        return redirect(url_for('applogin'))
    else:
        conn = dbi.connect()
        curs = dbi.dict_cursor(conn)
        numrows = curs.execute(
            '''select filename from Picfile where username = %s''',
            [username])
        if numrows == 0:
            flash('No picture for {}'.format(username))
            return redirect(url_for('index'))
        row = curs.fetchone()
        return send_from_directory(app.config['UPLOADS'],row['filename'])


@app.route('/myprofile/')
def myprofile():
    ''' displays the profile of the user from the session '''
    if 'CAS_USERNAME' not in session:
        return redirect(url_for('applogin'))
    else:
        username = session['CAS_USERNAME']
        return redirect( url_for('profile', username = username)) 

@app.route('/post/<post_id>', methods =['GET', 'POST'])
def post(post_id):
    ''' displays the information of the singular post 
    along with its comments '''
    if 'CAS_USERNAME' not in session:
        return redirect(url_for('applogin'))
    else:
        conn = dbi.connect()
        their_username=session['CAS_USERNAME']
        if request.method == 'GET':
            post=qf.get_post_info(conn, post_id)
            if post['display_now'] == False: 
                #flash something
                return redirect( url_for('index') )
            poster = qf.get_profile_info(conn, post['username'])
            comments = qf.get_post_comments(conn, post['pid'])
            return render_template('post.html', page_title="Post " + str(post['pid']), post = post, poster=poster,
            username=their_username, comments=comments)
        else:
            time = datetime.now()
            content = request.form['new_comment']
            cf.addComment(conn, their_username, post_id, content, time)
            return redirect( url_for('post', post_id = post_id)) 

@app.route('/result/')
def result():
    ''' takes the input of the filter form and returns the home page
    with the corresponding posts that match the information specified
    in the filter'''
    if 'CAS_USERNAME' not in session:
        return redirect(url_for('applogin'))
    else: 
        conn = dbi.connect()
        destination = request.args.get('destination-name')
        street_address = request.args.get('street-address')
        city = request.args.get('city')
        state = request.args.get('menu-state') 
        zipcode = request.args.get('zip') 
        user = request.args.get('menu-user') 
        date = request.args.get('date')  
        time = request.args.get('time')  
        seats = request.args.get('seats')
        cost = request.args.get('cost')
        users = qf.get_all_users(conn)
        states = qf.get_all_states(conn)
        posts = qf.get_result_posts(conn, destination, street_address, city, state, zipcode, 
        user, date, time, seats, cost)
        return render_template('main.html',page_title='Wellesley Ride Share Results', posts = posts,
        users = users, states=states)

@app.route('/myposts/', methods =['GET'])
def showmy():
    '''My posts page has a nav bar and will eventually shows all posts in the database
    made by the logged in user but not yet implemented.'''
    if 'CAS_USERNAME' not in session:
        return redirect(url_for('applogin'))
    else:
        return render_template("myposts.html", page_title = "My Posts")

@app.route('/createpost/', methods =['GET', 'POST'])
def insert():
    '''An insert post page with a form to do just that. Redirects to home page after submit.'''
    if 'CAS_USERNAME' not in session:
        return redirect(url_for('applogin'))
    else:
        username = session['CAS_USERNAME']
        #blank form 
        if request.method == 'GET':
            return render_template("insert.html", username=username, page_title = "Create Post")
        #submit button was clicked
        else: 
            conn = dbi.connect()
            #gettting info from form
            type = request.form['post-type']
            date = request.form['post-date'].replace("-", "")
            time = request.form['post-time']
            title = request.form['post-title']
            seats = request.form['post-seats']
            special_request = request.form['post-specials']
            #special_request is optional so set it to None if left blank
            if special_request == "":
                special_request = None
            display_now = True
            cost = request.form['post-cost']
            destination = request.form['post-address-name']
            street_address = request.form['post-address-street']
            city = request.form['post-address-city']
            state = request.form['post-address-state']
            zipcode = request.form['post-address-zipcode']
            #insert the post
            cf.insertpost(conn, username, type, date, time, destination, street_address, 
            city, state, zipcode, title, seats, special_request, display_now, cost)
            return redirect( url_for('showmy') )


@app.before_first_request
def init_db():
    dbi.cache_cnf()
    # set this local variable to 'wmdb' or your personal or team db
    db_to_use = 'rideshare_db' 
    dbi.use(db_to_use)
    print('will connect to {}'.format(db_to_use))

application = app


if __name__ == '__main__':
    import sys, os
    if len(sys.argv) > 1:
        # arg, if any, is the desired port number
        port = int(sys.argv[1])
        if not(1943 <= port <= 1952):
            print('For CAS, choose a port from 1943 to 1952')
            sys.exit()
        #may need to do back:::assert(port>1024)
    else:
        port = os.getuid()
    app.debug = True
    app.run('0.0.0.0',port)
import cs304dbi as dbi

# ==========================================================
# The CRUD functions that do most of the CRUD work.

def insertpost(conn, username, type, date, time, destination, street_address, city, state, 
zipcode, title, seats, special_request, display_now, cost):
    """ Inserts a post into the database based on a given username, type, date, time,
    destination, street address, city, state zipcode, seats, special request, display 
    now attribute and cost. """
    curs = dbi.dict_cursor(conn)
    curs.execute(''' insert into Post(username, type, date, time, destination, street_address,
        city, state, zipcode, title, seats, special_request, display_now, cost) 
        values (%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s);''',
                      [username, type, date, time, destination, street_address, city, state, 
                      zipcode, title, seats, special_request, display_now, cost])
    conn.commit()


def insertUser(conn, username, name):
    """ inserts a given user into the User table """
    curs = dbi.dict_cursor(conn)
    curs.execute(''' insert into User(username,name)
        values (%s,%s);''',
                      [username, name])
    conn.commit()

def updateUser(conn, username, phone_number, class_year, major, hometown):
    """ updates the User table with give phone number, class year, major and hometown """
    curs = dbi.dict_cursor(conn)
    curs.execute('''update User set phone_number = %s, class_year = %s,  major = %s, 
    hometown = %s where username = %s''',
             [phone_number, class_year, major, hometown, username])
    conn.commit()

def updateProfilePic(conn, their_username, filename):
    """ updates the Picfile table given a filename """
    curs = dbi.dict_cursor(conn)
    curs.execute(
                '''insert into Picfile(username,filename) values (%s,%s)
                   on duplicate key update filename = %s''',
                [their_username, filename, filename])
    conn.commit()

def deactivatePost(conn, pid):
    """ sets a given Post's diplay_now attribute to false"""
    curs = dbi.dict_cursor(conn)
    curs.execute('update Post set display_now = False where pid = %s', [pid])
    conn.commit()

def addComment(conn, username, pid, content, time):
    """ adds a comment into the Comment table given its post id, content, and 
    the time of comment """
    curs = dbi.dict_cursor(conn)
    curs.execute(
                'insert into Comment(username,pid, content, time) values (%s,%s,%s,%s)',
                [username, pid, content, time])
    conn.commit()import cs304dbi as dbi

# ==========================================================
# The functions that do most of the queue and display of posting work.

def get_posts_with_usernames(conn):
    """ gets info about all posts and corresponding usernames """
    curs = dbi.dict_cursor(conn)
    curs.execute('''select * from Post inner join User using (username)
     where display_now = True order by date, time;''')
    return curs.fetchall()

def get_profile_info(conn, username):
    """ gets profile info about a given username"""
    curs = dbi.dict_cursor(conn)
    curs.execute('select * from User where username = %s;', [username])
    return curs.fetchone()
    
def get_all_users(conn):
    """ returns a dictionary containing all of the users and their info 
    in the User table  """
    curs = dbi.dict_cursor(conn)
    curs.execute('select * from User order by username')
    return curs.fetchall()

def get_all_states(conn):
    """ returns a list containing all of the states with no repeats in the Post table where
    their display attribute is true """
    curs = dbi.dict_cursor(conn)
    curs.execute('select `state` from Post where display_now = True')
    all_states = curs.fetchall()
    states = []
    for s in all_states:
        s_name = s['state']
        if s_name not in states:
            states.append(s_name)
    return sorted(states)

def get_result_posts(conn, destination, street_address, city, state, zipcode, 
user, date, time, seats, cost):
    """ returns a dictionary of posts that match the given inputed criteria """
    args_lst = []
    curs = dbi.dict_cursor(conn)
    if destination == "":
        destination_string = ''
    else:
        destination_string = 'where destination = %s'
        args_lst.append(destination)

    if street_address == "":
        street_address_string = ''
    else:
        if destination_string == "":
            street_address_string = 'where street_address = %s'
            args_lst.append(street_address)
        else:
            street_address_string = ' and street_address = %s' 
            args_lst.append(street_address)
    if city == "":
        city_string = ""
    else:
        if destination_string == "" and street_address_string == "":
            city_string = 'where city = %s'
            args_lst.append(city)
        else:
            city_string = ' and city = %s'
            args_lst.append(city)
    if state == "none":
        state_string = ""
    else:
        if destination_string == "" and street_address_string == "" and city_string == "":
            state_string = 'where state = %s'
            args_lst.append(state)
        else:
            state_string = ' and state = %s'
            args_lst.append(state)
    
    if zipcode == "":
        zipcode_string = ""
    else:
        if (destination_string == "" and street_address_string == "" and city_string == "" 
        and state_string == ""):
            zipcode_string = 'where zipcode = %s'
            args_lst.append(zipcode)
        else:
            zipcode_string = ' and zipcode = %s'
            args_lst.append(zipcode)
    if user == "none":
        user_string = ''
    else:
        if (destination_string == '' and street_address_string == "" and city_string == "" 
        and state_string == "" and zipcode_string == ""):
            user_string = 'where username = %s'
            args_lst.append(user)
        else:
            user_string = ' and username = %s'
            args_lst.append(user)

    if date == "":
        date_string = ""
    else:
        if (destination_string == '' and street_address_string == "" and city_string == "" 
        and state_string == "" and zipcode_string == "" and user_string == ""):
            date_string = 'where date = %s'
            args_lst.append(date)
        else:
            date_string = ' and date = %s'
            args_lst.append(date)

    if time == "":
        time_string = ""
    else:
        if (destination_string == '' and street_address_string == "" and city_string == "" 
        and state_string == "" and zipcode_string == "" and user_string == "" and date_string == ""):
            time_string = 'where time = %s'
            args_lst.append(time)
        else:
            time_string = ' and time = %s'
            args_lst.append(time)
    if seats == '':
        seats_string = ''
    else:
        if (destination_string == '' and street_address_string == "" and city_string == "" 
        and state_string == "" and zipcode_string == "" and user_string == ''
         and date_string == '' and time_string == ''):
            seats_string = 'where seats = %s'
            args_lst.append(seats)
        else:
            seats_string = ' and seats = %s'
            args_lst.append(seats)
    
    if cost == '':
        cost_string = ''
    else:
        if (destination_string == '' and street_address_string == "" and city_string== "" 
        and state_string == "" and zipcode_string == "" and user_string == '' and 
        date_string == "" and time_string == '' and seats_string == ''):
            cost_string = 'where cost = %s'
            args_lst.append(cost)
        else:
            cost_string = ' and cost = %s'
            args_lst.append(cost)
    if (destination_string == '' and street_address_string == "" and city_string== "" 
    and state_string == "" and zipcode_string == "" and user_string == '' 
    and date_string == "" and time_string == '' and seats_string == '' and cost_string == ''):
        display_now_string = 'where display_now = True'
    else:
        display_now_string = ' and display_now = True'
    curs.execute('select * from Post inner join User using (username) ' 
    + destination_string + street_address_string + city_string + state_string + 
    zipcode_string + user_string + date_string + time_string + seats_string + 
    cost_string + display_now_string + ' order by date, time;', args_lst)
    return curs.fetchall()


def get_post_comments(conn, pid):
    """ returns a dictionary of all the comments for a given post """
    curs = dbi.dict_cursor(conn)
    curs.execute('select * from Comment where pid = %s;', [pid])
    return curs.fetchall()


def userExists (conn, username):
    """ returns a boolean to see whether the user exists in the User table """
    curs = dbi.dict_cursor(conn)
    curs.execute('select * from User where username = %s;', [username])
    return (curs.fetchone() != None)


def getProfilePic(conn, username):   
    """ returns a dictionary containing the information in the Picfile table for 
    a given username """
    curs = dbi.dict_cursor(conn)
    curs.execute(
        '''select * from Picfile where username = %s''',
        [username])
    return curs.fetchone()

def get_post_info(conn, post_id):
    """ returns a dictionary containing the information in the Post table for 
    a given post """
    curs = dbi.dict_cursor(conn)
    curs.execute(
        '''select * from Post where pid = %s''',
        [post_id])
    return curs.fetchone()/* the --color-header and others are CSS variables, which we access later. 
*/

HTML {
    --color-header: #264653;  /* color for H1-H6 and others. was deepskyblue but poor contrast. */
    --color-hilite: #e9c46a;  /* was red, but this avoids WAVE contrast errors */ 
    --color-focus: #f4a261;
    --font-family: Georgia;
    font-family: var(--font-family)
}

/* For flashed messages; make them stand out using red and italics */

#messages {
    color: var(--color-hilite);
    font-style: italic;
}

form{
    background-color: peachpuff;
    float: left;
    margin: 0px 25px 0px 25px;
    padding: 10px;
    line-height: 25px;
}

.post-block {
    width: 600px;
    padding: 10px;
    margin: auto;
    margin-left: 225px;
    margin-bottom: 15px;
  }
  
  .login{
    margin: 5px;
    background-color: #add8e6;
    line-height: 5px;
    padding: 5px;
    margin-top: 1px;
    margin-right: 2px;
    position:absolute;
    top:0;
    right:0;
}

.offering-post{
    background-color: #8ad281
}

.looking-for-post{
    background-color: #97d1ca;
}

.offering-info{
    margin: 5px;
    background-color: #c2f6bb;
    line-height: 5px;
    padding: 5px;  
}

.seeking-info{
    margin: 5px;
    background-color: #caf4ed;
    line-height: 5px;
    padding: 5px;  
}

body {background-color: #FFCCBB;}

h1 {
    font-size: 200%;
    color: var(--color-header);
}

   
h2, h3 {
    color: var(--color-header);
}

h4 {
    color: rgb(0, 0, 0);
}

/* for a simple navbar. Talk to Scott if you want drop-downs. */
nav > ul {
    display: flex;
    flex-direction: row;
    color: #2a9d8f
}

nav ul {
    list-style-type: none;
    margin: 0px;
    padding: 0px;
    color: #E76F51

}

nav > ul > li {
    flex: 0 0 auto;
    width: 15em; 
}

nav button, nav a {
    display: block;
    box-sizing: border-box; /* easier to make button and A the same size */
    width: 100%;
    height: 40px;
    padding: 0px;
    padding-bottom: 5px;
    background-color: var(--color-header); /* was #3498db */
    border: 2px solid black;
    border-radius: 5px;
    cursor: pointer;
    /* Firefox uses font -apple-system unless I repeat the font spec here. */
    font-family: var(--font-family);
    font-weight: bold;
    font-size: 1.4rem;
    color: white;
    
}

/* Only the top-level buttons are centered; lower ones are left-aligned. */
nav > ul > li > button , nav > ul > li > a {
    text-align: center;
}

/* because of the margin trick, this can only be used for the last element */

nav li.right {
    margin-left: auto;
}

nav button:hover, button:focus, nav a:hover, nav a:focus {
    background-color: var(--color-focus);
}

.profile-page{
    background-color: #c2f6bb;
    line-height: 15px;
    padding: 5px;
    margin: 10px;
}

.profile-pic{
    padding: 10px;
    margin: 10px;
    display: inline-block;
}

use rideshare_db;

drop table if exists Picfile;
drop table if exists `Comment`;
drop table if exists `Post`;
drop table if exists `User`;



CREATE TABLE `User` (
  `username` varchar(30),
  `name` varchar(30),
  `phone_number` varchar(12),
  `class_year` varchar(4),
  `major` varchar(30),
  `hometown` varchar(100),
  PRIMARY KEY (`username`)
);

CREATE TABLE `Post` (
  `pid` int auto_increment,
  `username` varchar(30),
  `type` ENUM('looking for', 'offering'),
  `destination` varchar(100),
  `street_address` varchar(100),
  `city` varchar(30),
  `state` varchar(2),
  `zipcode` varchar(5),
  `date` date,
  `time` time,
  `title` varchar(100),
  `seats` int,
  `special_request` varchar(1000),
  `display_now` boolean,
  `cost` int,
  PRIMARY KEY (`pid`)
);

CREATE TABLE `Comment` (
  `cid` int auto_increment,
  `username` varchar(30),
  `pid` int,
  `content` varchar(2200),
  `time` datetime,
  PRIMARY KEY (`cid`)
);

create table Picfile (
    `username` varchar(30) primary key,
    filename varchar(50),
    foreign key (`username`) references User(`username`)
        on delete cascade on update cascade
);

ALTER TABLE `Comment` ADD FOREIGN KEY (`username`) REFERENCES `User` (`username`);

ALTER TABLE `Comment` ADD FOREIGN KEY (`pid`) REFERENCES `Post` (`pid`);

ALTER TABLE `Post` ADD FOREIGN KEY (`username`) REFERENCES `User` (`username`);
<!-- Flask/PyMySQL app to post ride request and offers in the rideshare_db.
    Base HTML file to that uses template inheritance
    Daisy, Lindsay, and Valerie. 
    Fall 2022 -->
  

<!doctype html>
<html lang='en'>
<head>
    <meta charset='utf-8'>
    <!-- for mobile-friendly pages -->
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name=author content="">
    <title>{{ page_title }}</title>
    <link rel='stylesheet' href="{{url_for('static', filename = 'style.css')}}">
    {% block head_stuff %} {% endblock %}
</head>
<body>

{% with messages = get_flashed_messages() %}
{% if messages %}
<div id="messages">
  {% for msg in messages %}
  <p>{{msg}}</p>
  {% endfor %}
</div>
{% endif %}
{% endwith %}

<!-- Start of CAS login/out button-->
        
{% if username %}

    <form method="GET" action="{{url_for('cas.logout')}}">
      <button>logout {{username}}</button>
    </form>
{% else %}
<form method="GET" action="{{url_for('cas.login')}}">
 <button>login</button>
</form>
{% endif %}

<!-- End of CAS login/logout button-->
  
<!-- Navigation bar  Block Begins-->
{% block nav %}
<nav>
  <ul>
    <li><a href="{{url_for('index')}}">All Posts</a></li>
    <li><a href="{{url_for('showmy')}}">My Posts</a></li>
    <li><a href="{{url_for('myprofile')}}">My Profile</a></li>
    <li><a href="{{url_for('insert')}}">Create a Post</a></li>
  </ul>
</nav>
{% endblock %}

<!-- Navigation bar Block Ends-->


<!-- Main Block Begins-->
{% block main_content %}
<h1>Welcome!</h1>
{% endblock %}

  <script src="https://code.jquery.com/jquery-3.4.1.min.js"></script>
  {% block end_scripts %}
  {% endblock %}
  
</body>

<!-- Main Block Ends-->



</html>
<!-- Flask/PyMySQL app to post ride request and offers in the rideshare_db.  
    HTML file that implements the create post form page of the app
    by extending Base HTML file
    Daisy, Lindsay, and Valerie. 
    Fall 2022 -->

{% extends "base.html" %}

{% block main_content %}
<h1>Create a post!</h1>

<p>If you would like to make a ride request or ride offer post to be displayed to others, fill out this form!</p>

<form action="{{url_for('insert')}}"
method="post">
<!-- modern browsers will insist that
 "required" elemements are non-empty -->
 <p>Basics:</p>


<p><label>Type of Post:
    <select required name="post-type">
        <option value="">choose</option>
        <option value="offering">Giving a ride</option>
        <option value="looking for">Looking for a ride</option>
    </select>
</label></p>

<p><label>Title of Post:
<input 
       type="text" name="post-title" placeholder="Late night trip to Target!"required>
</label></p>

<p><label>Name of Destination:
    <input type="text" name="post-address-name" placeholder="Target"required> </label></p>

<br>
<p>More details:</p>

<p><label>Number of Seats needed/offering:
    <input 
           type="number" name="post-seats" required>
    </label></p>


<p><label>Date of Ride wanted/offering:
<input 
       type="date" name="post-date" required>
</label> 

<p><label>Time of Ride wanted/offering:
    <input 
           type="time" name="post-time" required>
    </label> 

<p><label>Special requests/specifal offers:

    <input 
           type="text" name="post-specials" placeholder="need big trunk">
    </label></p>

    <p><label>Price ($) charging/willing to pay:
        <input 
               type="number" name="post-cost" placeholder=5 required>
        </label></p>

<br>
<p>Address Details:</p>

<p><label>Street Adress:
<input type="text" name="post-address-street" placeholder="400 Chochituate Rd."required> </label></p>

<p><label>City:
<input type="text" name="post-address-city" placeholder="Framingham"required> </label></p>

<p><label>State:
<input type="text" name="post-address-state" placeholder="MA"required> </label></p>

<p><label>Zipcode:
<input type="number" name="post-address-zipcode" placeholder="01701"required> </label></p>

<p><input type="submit" value="Create Post!">
</form>


{% endblock %}
<!-- Flask/PyMySQL app to post ride request and offers in the rideshare_db. 
    HTML file that implements the home page of the app
    by extending Base HTML file
    Daisy, Lindsay, and Valerie. 
    Fall 2022 -->
    {% extends "base.html" %}

  
    
    {% block main_content %}
    <h1>Please Log in to Continue</h1>
   
    {% endblock %}
    <!-- Flask/PyMySQL app to post ride request and offers in the rideshare_db. 
    HTML file that implements the home page of the app
    by extending Base HTML file
    Daisy, Lindsay, and Valerie. 
    Fall 2022 -->
{% extends "base.html" %}


{% block main_content %}
<h1>Wellesley College Rideshare</h1>
<p>Students looking for drivers are posts highlighted in <b>blue</b> and students offering rides are posts highlighted in <b>green</b>.</p>



<form method= GET action="{{url_for('result')}}">
  <label>Destination Name:<br>
  <input type="text" name="destination-name"></label><br>
  <label>Street Address:<br>
  <input type="text" name="street-address"></label><br>
  <label>City:<br>
  <input type="text" name="city"></label><br>
  <label>State:
  <select id="menu-state" name="menu-state">
  <option value="none"></option>
    {% for state in states %}
    <option value="{{state}}">{{state}}</option>
    {% endfor %}
 </select></label><br>
 <label>Zip Code:<br>
  <input type="text" name="zip"></label><br>
  <label>User:<br>
  <select id="menu-user" name = "menu-user">
    <option value="none"></option>
    {% for user in users %}
    <option value="{{user.username}}">{{user.username}} ({{user.name}})</option>
    {% endfor %}
  </select></label><br>
  <label> Date:
  <input type="date" name="date"></label><br>
  <label>Time:<br>
  <input type="time" name="time"></label><br>
  <label>Cost ($):<br>
  <input type="number" name="cost"></label><br>
  <label>Seats:<br>
  <input type="number" name="seats"></label><br>
  <p><input type="submit" value="Search"></p>
     
</form>

{% for post in posts %}
{% if post.type == "offering" %}
<div class = "offering-post post-block ">
  <h3>Offering: (<a href = "{{ url_for( 'post', post_id = post.pid) }}">{{post.title}}</a>) </h3> 
{% else %}
<div class = "looking-for-post post-block">
  <h3>Looking for: (<a href = "{{ url_for( 'post', post_id = post.pid) }}">{{post.title}}</a>) </h3> 
{% endif %}
    {% if post.type == "offering" %}
    <div class = "offering-info">
    {% else %}
    <div class = "seeking-info">
    {% endif %}
        <p>User: {{post.name}} (<a href = "{{ url_for( 'profile', username = post.username ) }}">{{post.username}}</a>)</p>
        <p>Phone Number: {{post.phone_number}}</p>
    </div>
    {% if post.type == "offering" %}
    <div class = "offering-info">
    {% else %}
    <div class = "seeking-info">
    {% endif %}
        <p>{{post.destination}}, {{post.street_address}}, {{post.city}}, {{post.state}} {{post.zipcode}}</p>
    </div>
    {% if post.type == "offering" %}
    <div class = "offering-info">
    {% else %}
    <div class = "seeking-info">
    {% endif %}
    <p>Date: {{post.date.month}}/{{post.date.day}}/{{post.date.year}} Time: {{post.time}}</p>
    <p>Seats: {{post.seats}}</p>
    <p>Cost: ${{post.cost}}</p>
    <p>Special Request: {{post.special_request}}</p>
    </div>
</div>
{% endfor %}


{% endblock %}
<!-- Flask/PyMySQL app to post ride request and offers in the rideshare_db.  
    HTML file that implements the My Posts page of the app
    by extending Base HTML file
    Daisy, Lindsay, and Valerie. 
    Fall 2022 -->
{% extends "base.html" %}

{% block main_content %}
<h1>My Posts!</h1>
{% for post in posts %}

<form action="{{url_for('my_posts')}}" method="post">
    {% if post.type == "offering" %}
    <div class = "offering-post post-block">
      <h3>Offering: (<a href = "{{ url_for( 'post', post_id = post.pid) }}">{{post.title}}</a>) </h3> 
    {% else %}
    <div class = "looking-for-post post-block">
      <h3>Looking for: (<a href = "{{ url_for( 'post', post_id = post.pid) }}">{{post.title}}</a>) </h3> 
    {% endif %}
        {% if post.type == "offering" %}
        <div class = "offering-info">
        {% else %}
        <div class = "seeking-info">
        {% endif %}
            <p>User: {{post.name}} (<a href = "{{ url_for( 'profile', username = post.username ) }}">{{post.username}}</a>)</p>
            <p>Phone Number: {{post.phone_number}}</p>
        </div>
        {% if post.type == "offering" %}
        <div class = "offering-info">
        {% else %}
        <div class = "seeking-info">
        {% endif %}
            <p>{{post.destination}}, {{post.street_address}}, {{post.city}}, {{post.state}} {{post.zipcode}}</p>
        </div>
        {% if post.type == "offering" %}
        <div class = "offering-info">
        {% else %}
        <div class = "seeking-info">
        {% endif %}
        <p>Date: {{post.date.month}}/{{post.date.day}}/{{post.date.year}} Time: {{post.time}}</p>
        <p>Seats: {{post.seats}}</p>
        <p>Cost: ${{post.cost}}</p>
        <p>Special Request: {{post.special_request}}</p>
    </div></div>
    <p><button name="pid" type="submit" value={{post.pid}}>Delete Post</button>  </p>
    </form>
    

{% endfor %}

{% endblock %}
<!-- Flask/PyMySQL app to post ride request and offers in the rideshare_db. 
    HTML file that implements the ??? page of the app
    by extending Base HTML file
    Daisy, Lindsay, and Valerie. 
    Fall 2022 -->
    {% extends "base.html" %}

    {% block main_content %}
    <div>
    <h1>{{ post.title }}</h1>
    <br>
    <h2>Who? </h2>
    {% if post.type=='looking for' %}
    <h4>Person Looking For a Ride: {{ poster.name }}</h4>  
    {% else %}
    <h4>Driver: {{ poster.name }}</h4>  
    {% endif %}
    <h4>Their Contact Info: {{ poster.phone_number }}</h4>  

    <h2>Where? </h2>
    <h4>Destination: {{ post.destination }}</h4>
    <h4>Address: {{ post.street_address }} {{ post.city }}, {{post.state}} {{post.zipcode}}</h4>
    <h4>Date: {{ post.date }} </h4>
    <h4>Time: {{ post.time }}</h4>

    <h2>Extra Info? </h2>
    {% if post.type=='looking for' %}
    <h4>Seats Needed: {{ post.seats }}</h4> 
    {% else %}
    <h4>Seats Available: {{ post.seats }}</h4>  
    {% endif %} 

    {% if post.type=='looking for' %}
    <h4>Amount Willing to Pay: {{ post.cost }}</h4> 
    {% else %}
    <h4>Charging: {{ post.cost}}</h4>  
    {% endif %} 

    <h4>Special_Request: {{ post.special_request }}</h4>
    
    <br>
    <h2>Comments:</h2>
    {% for comment in comments %}
    <h5>{{comment.username}} said "{{comment.content}}" at {{comment.time}}.</h5>
    </div>
    </div>
    {% endfor %}
    </div>



    <form action="{{url_for('post', post_id = post.pid)}}" method="post">

    <p><label for="comment">Add a comment:</label></p>
    <p><textarea id="comment" name="new_comment" rows=3 cols=60></textarea></p>

    <p><input type="submit" value="Add comment!">
    </form>

    {% endblock %}
    <!-- Flask/PyMySQL app to post ride request and offers in the rideshare_db. 
    HTML file that implements the profile page of the app
    by extending Base HTML file
    Daisy, Lindsay, and Valerie. 
    Fall 2022 -->
    {% extends "base.html" %}

    {% block main_content %}
    <div class = "profile-page">
    <h1>{{ user.name }}</h1>
    <h2>Username: {{ user.username }}</h2>
    <h2>Phone Number: {{ user.phone_number }}</h2>
    <h2>Class Year: {{ user.class_year }}</h2>
    <h2>Major: {{ user.major }}</h2>
    <h2>Hometown: {{ user.hometown }}</h2>
    </div>  
    <div class = "profile-pic">
    <img src="{{url_for('pic',username=pic['username'])}}" height="300" alt="{{pic['username']}}">
    <br> 
    </div>  
    <div>
    <button type="button"><a href="{{url_for('update_user')}}">Update Profile here</a></button>
    </div>
    
    
    {% endblock %}
    <!-- Flask/PyMySQL app to post ride request and offers in the rideshare_db.  
    HTML file that implements update profile page
    Daisy, Lindsay, and Valerie. 
    Fall 2022 -->

    {% extends "base.html" %}

    {% block main_content %}
    <h1>Update/complete your Profile!</h1>
    
    <p>Please use this to complete/update your profile. If you don't want to change an attribute, leave that field blank!</p>
    

    <form action="{{url_for('update_user', username = username)}}" enctype="multipart/form-data"
    method="post">

    <!-- modern browsers will insist that
     "required" elemements are non-empty -->
     <p>Your information:</p>

    <p>Here is your current profile picture: </p>
    <img src="{{url_for('pic',username=pic['username'])}}" height="300" alt="{{pic['username']}}">
    
    <p><label>Profile Picture: <input type="file" name="pic"></label></p>
    
    <p>Here is your current cell phone number: {{current_pn}}</p>
    <p><label>Your Cell Phone Number:
        <input 
               type="tel" name="phone_number" placeholder="123-456-7890">
        </label></p> 
    
    <p>Here is your current class year: {{current_cy}}</p>
    <p><label>Class Year:
        <select  name="class_year">
            <option value="">choose</option>
            <option value="2023">2023</option>
            <option value="2024">2024</option>
            <option value="2025">2025</option>
            <option value="2026">2026</option>
        </select>
    </label></p>
    
    <p>Here is your current major: {{current_mj}}</p>
    <p><label>Major:
    <input 
           type="text" name="major" placeholder="Economics and GeoScience">
    </label></p>
    
    <p>Here is your current hometown: {{current_ht}}</p>
    <p><label>Where are you from?:
        <input type="text" name="hometown" placeholder="Nashville, TN"> </label></p>
    
    <p><input type="submit" value="Complete Profile!">
    </form>
    
    
    {% endblock %}
    